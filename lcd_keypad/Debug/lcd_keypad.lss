
lcd_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000039e  00000412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000699  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000343  00000000  00000000  00000bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062c  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000286  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000037d  00000000  00000000  0000190e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001c8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b6 01 	call	0x36c	; 0x36c <main>
  7a:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Keypad_init>:

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	81 bb       	out	0x11, r24	; 17
	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret

00000094 <Keypad_getkey>:
}

char Keypad_getkey(){
  94:	af 92       	push	r10
  96:	bf 92       	push	r11
  98:	cf 92       	push	r12
  9a:	df 92       	push	r13
  9c:	ef 92       	push	r14
  9e:	ff 92       	push	r15
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	00 e6       	ldi	r16, 0x60	; 96
  aa:	10 e0       	ldi	r17, 0x00	; 0
	int i,j;
	for (i = 0; i < 4; i++){
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	d0 e0       	ldi	r29, 0x00	; 0
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
  b0:	d8 01       	movw	r26, r16
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	0f 2e       	mov	r0, r31
  b8:	f8 e6       	ldi	r31, 0x68	; 104
  ba:	cf 2e       	mov	r12, r31
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	df 2e       	mov	r13, r31
  c0:	f0 2d       	mov	r31, r0
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
  c2:	a1 2c       	mov	r10, r1
  c4:	b1 2c       	mov	r11, r1
}

char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
  c6:	92 b3       	in	r25, 0x12	; 18
  c8:	ba 01       	movw	r22, r20
  ca:	0c 90       	ld	r0, X
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <Keypad_getkey+0x3e>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <Keypad_getkey+0x3a>
  d6:	9a 01       	movw	r18, r20
  d8:	12 96       	adiw	r26, 0x02	; 2
  da:	0c 90       	ld	r0, X
  dc:	12 97       	sbiw	r26, 0x02	; 2
  de:	02 c0       	rjmp	.+4      	; 0xe4 <Keypad_getkey+0x50>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <Keypad_getkey+0x4c>
  e8:	26 2b       	or	r18, r22
  ea:	82 2f       	mov	r24, r18
  ec:	89 2b       	or	r24, r25
  ee:	9a 01       	movw	r18, r20
  f0:	14 96       	adiw	r26, 0x04	; 4
  f2:	0c 90       	ld	r0, X
  f4:	14 97       	sbiw	r26, 0x04	; 4
  f6:	02 c0       	rjmp	.+4      	; 0xfc <Keypad_getkey+0x68>
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <Keypad_getkey+0x64>
 100:	28 2b       	or	r18, r24
 102:	ca 01       	movw	r24, r20
 104:	16 96       	adiw	r26, 0x06	; 6
 106:	0c 90       	ld	r0, X
 108:	16 97       	sbiw	r26, 0x06	; 6
 10a:	02 c0       	rjmp	.+4      	; 0x110 <Keypad_getkey+0x7c>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <Keypad_getkey+0x78>
 114:	82 2b       	or	r24, r18
 116:	82 bb       	out	0x12, r24	; 18
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
 118:	92 b3       	in	r25, 0x12	; 18
 11a:	f8 01       	movw	r30, r16
 11c:	80 81       	ld	r24, Z
 11e:	0e 5f       	subi	r16, 0xFE	; 254
 120:	1f 4f       	sbci	r17, 0xFF	; 255
 122:	9a 01       	movw	r18, r20
 124:	02 c0       	rjmp	.+4      	; 0x12a <Keypad_getkey+0x96>
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	8a 95       	dec	r24
 12c:	e2 f7       	brpl	.-8      	; 0x126 <Keypad_getkey+0x92>
 12e:	82 2f       	mov	r24, r18
 130:	80 95       	com	r24
 132:	89 23       	and	r24, r25
 134:	82 bb       	out	0x12, r24	; 18
 136:	f6 01       	movw	r30, r12
 138:	7a 01       	movw	r14, r20
 13a:	6a 2d       	mov	r22, r10
 13c:	7b 2d       	mov	r23, r11
 13e:	05 c0       	rjmp	.+10     	; 0x14a <Keypad_getkey+0xb6>
 140:	6f 5f       	subi	r22, 0xFF	; 255
 142:	7f 4f       	sbci	r23, 0xFF	; 255
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	e8 1a       	sub	r14, r24
 148:	f8 0a       	sbc	r15, r24
		for(j = 0; j < 4; j++){
			if (!(keypadPIN & (1 << Key_padRow[j])))
 14a:	80 b3       	in	r24, 0x10	; 16
 14c:	20 81       	ld	r18, Z
 14e:	32 96       	adiw	r30, 0x02	; 2
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 2e       	mov	r0, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <Keypad_getkey+0xc6>
 156:	95 95       	asr	r25
 158:	87 95       	ror	r24
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <Keypad_getkey+0xc2>
 15e:	80 fd       	sbrc	r24, 0
 160:	4f c0       	rjmp	.+158    	; 0x200 <Keypad_getkey+0x16c>
 162:	ca 01       	movw	r24, r20
 164:	02 c0       	rjmp	.+4      	; 0x16a <Keypad_getkey+0xd6>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	2a 95       	dec	r18
 16c:	e2 f7       	brpl	.-8      	; 0x166 <Keypad_getkey+0xd2>
 16e:	9c 01       	movw	r18, r24
			{
				while(!(keypadPIN & (1 << Key_padRow[j])));
 170:	80 b3       	in	r24, 0x10	; 16
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	82 23       	and	r24, r18
 176:	93 23       	and	r25, r19
 178:	89 2b       	or	r24, r25
 17a:	d1 f3       	breq	.-12     	; 0x170 <Keypad_getkey+0xdc>
				switch(i){
 17c:	c1 30       	cpi	r28, 0x01	; 1
 17e:	d1 05       	cpc	r29, r1
 180:	c1 f0       	breq	.+48     	; 0x1b2 <Keypad_getkey+0x11e>
 182:	1c f4       	brge	.+6      	; 0x18a <Keypad_getkey+0xf6>
 184:	20 97       	sbiw	r28, 0x00	; 0
 186:	41 f0       	breq	.+16     	; 0x198 <Keypad_getkey+0x104>
 188:	3b c0       	rjmp	.+118    	; 0x200 <Keypad_getkey+0x16c>
 18a:	c2 30       	cpi	r28, 0x02	; 2
 18c:	d1 05       	cpc	r29, r1
 18e:	f1 f0       	breq	.+60     	; 0x1cc <Keypad_getkey+0x138>
 190:	c3 30       	cpi	r28, 0x03	; 3
 192:	d1 05       	cpc	r29, r1
 194:	41 f1       	breq	.+80     	; 0x1e6 <Keypad_getkey+0x152>
 196:	34 c0       	rjmp	.+104    	; 0x200 <Keypad_getkey+0x16c>
					case (0):
						if (j == 0) return '7';
 198:	61 15       	cp	r22, r1
 19a:	71 05       	cpc	r23, r1
 19c:	e9 f1       	breq	.+122    	; 0x218 <Keypad_getkey+0x184>
						else if (j == 1) return '4';
 19e:	61 30       	cpi	r22, 0x01	; 1
 1a0:	71 05       	cpc	r23, r1
 1a2:	e1 f1       	breq	.+120    	; 0x21c <Keypad_getkey+0x188>
						else if (j == 2) return '1';
 1a4:	62 30       	cpi	r22, 0x02	; 2
 1a6:	71 05       	cpc	r23, r1
 1a8:	d9 f1       	breq	.+118    	; 0x220 <Keypad_getkey+0x18c>
						else if (j == 3) return '?';
 1aa:	63 30       	cpi	r22, 0x03	; 3
 1ac:	71 05       	cpc	r23, r1
 1ae:	41 f5       	brne	.+80     	; 0x200 <Keypad_getkey+0x16c>
 1b0:	39 c0       	rjmp	.+114    	; 0x224 <Keypad_getkey+0x190>
						break;
					case (1):
						if (j == 0) return '8';
 1b2:	61 15       	cp	r22, r1
 1b4:	71 05       	cpc	r23, r1
 1b6:	c1 f1       	breq	.+112    	; 0x228 <Keypad_getkey+0x194>
						else if (j == 1) return '5';
 1b8:	61 30       	cpi	r22, 0x01	; 1
 1ba:	71 05       	cpc	r23, r1
 1bc:	b9 f1       	breq	.+110    	; 0x22c <Keypad_getkey+0x198>
						else if (j == 2) return '2';
 1be:	62 30       	cpi	r22, 0x02	; 2
 1c0:	71 05       	cpc	r23, r1
 1c2:	b1 f1       	breq	.+108    	; 0x230 <Keypad_getkey+0x19c>
						else if (j == 3) return '0';
 1c4:	63 30       	cpi	r22, 0x03	; 3
 1c6:	71 05       	cpc	r23, r1
 1c8:	d9 f4       	brne	.+54     	; 0x200 <Keypad_getkey+0x16c>
 1ca:	34 c0       	rjmp	.+104    	; 0x234 <Keypad_getkey+0x1a0>
						break;
					case (2):
						if (j == 0) return '9';
 1cc:	61 15       	cp	r22, r1
 1ce:	71 05       	cpc	r23, r1
 1d0:	99 f1       	breq	.+102    	; 0x238 <Keypad_getkey+0x1a4>
						else if (j == 1) return '6';
 1d2:	61 30       	cpi	r22, 0x01	; 1
 1d4:	71 05       	cpc	r23, r1
 1d6:	91 f1       	breq	.+100    	; 0x23c <Keypad_getkey+0x1a8>
						else if (j == 2) return '3';
 1d8:	62 30       	cpi	r22, 0x02	; 2
 1da:	71 05       	cpc	r23, r1
 1dc:	89 f1       	breq	.+98     	; 0x240 <Keypad_getkey+0x1ac>
						else if (j == 3) return '=';
 1de:	63 30       	cpi	r22, 0x03	; 3
 1e0:	71 05       	cpc	r23, r1
 1e2:	71 f4       	brne	.+28     	; 0x200 <Keypad_getkey+0x16c>
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <Keypad_getkey+0x1b0>
						break;
					case (3):
						if (j == 0) return '/';
 1e6:	61 15       	cp	r22, r1
 1e8:	71 05       	cpc	r23, r1
 1ea:	71 f1       	breq	.+92     	; 0x248 <Keypad_getkey+0x1b4>
						else if (j == 1) return '*';
 1ec:	61 30       	cpi	r22, 0x01	; 1
 1ee:	71 05       	cpc	r23, r1
 1f0:	69 f1       	breq	.+90     	; 0x24c <Keypad_getkey+0x1b8>
						else if (j == 2) return '-';
 1f2:	62 30       	cpi	r22, 0x02	; 2
 1f4:	71 05       	cpc	r23, r1
 1f6:	61 f1       	breq	.+88     	; 0x250 <Keypad_getkey+0x1bc>
						else if (j == 3) return '+';
 1f8:	63 30       	cpi	r22, 0x03	; 3
 1fa:	71 05       	cpc	r23, r1
 1fc:	69 f5       	brne	.+90     	; 0x258 <Keypad_getkey+0x1c4>
 1fe:	2a c0       	rjmp	.+84     	; 0x254 <Keypad_getkey+0x1c0>
char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		for(j = 0; j < 4; j++){
 200:	94 e0       	ldi	r25, 0x04	; 4
 202:	e9 16       	cp	r14, r25
 204:	f1 04       	cpc	r15, r1
 206:	0c f4       	brge	.+2      	; 0x20a <Keypad_getkey+0x176>
 208:	9b cf       	rjmp	.-202    	; 0x140 <Keypad_getkey+0xac>
	KEYPAD_PORT = 0xFF;
}

char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	c4 30       	cpi	r28, 0x04	; 4
 20e:	d1 05       	cpc	r29, r1
 210:	09 f0       	breq	.+2      	; 0x214 <Keypad_getkey+0x180>
 212:	59 cf       	rjmp	.-334    	; 0xc6 <Keypad_getkey+0x32>
						break;
				}
			}
		}
	}
	return 'A';
 214:	81 e4       	ldi	r24, 0x41	; 65
 216:	26 c0       	rjmp	.+76     	; 0x264 <Keypad_getkey+0x1d0>
			if (!(keypadPIN & (1 << Key_padRow[j])))
			{
				while(!(keypadPIN & (1 << Key_padRow[j])));
				switch(i){
					case (0):
						if (j == 0) return '7';
 218:	87 e3       	ldi	r24, 0x37	; 55
 21a:	24 c0       	rjmp	.+72     	; 0x264 <Keypad_getkey+0x1d0>
						else if (j == 1) return '4';
 21c:	84 e3       	ldi	r24, 0x34	; 52
 21e:	22 c0       	rjmp	.+68     	; 0x264 <Keypad_getkey+0x1d0>
						else if (j == 2) return '1';
 220:	81 e3       	ldi	r24, 0x31	; 49
 222:	20 c0       	rjmp	.+64     	; 0x264 <Keypad_getkey+0x1d0>
						else if (j == 3) return '?';
 224:	8f e3       	ldi	r24, 0x3F	; 63
 226:	1e c0       	rjmp	.+60     	; 0x264 <Keypad_getkey+0x1d0>
						break;
					case (1):
						if (j == 0) return '8';
 228:	88 e3       	ldi	r24, 0x38	; 56
 22a:	1c c0       	rjmp	.+56     	; 0x264 <Keypad_getkey+0x1d0>
						else if (j == 1) return '5';
 22c:	85 e3       	ldi	r24, 0x35	; 53
 22e:	1a c0       	rjmp	.+52     	; 0x264 <Keypad_getkey+0x1d0>
						else if (j == 2) return '2';
 230:	82 e3       	ldi	r24, 0x32	; 50
 232:	18 c0       	rjmp	.+48     	; 0x264 <Keypad_getkey+0x1d0>
						else if (j == 3) return '0';
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	16 c0       	rjmp	.+44     	; 0x264 <Keypad_getkey+0x1d0>
						break;
					case (2):
						if (j == 0) return '9';
 238:	89 e3       	ldi	r24, 0x39	; 57
 23a:	14 c0       	rjmp	.+40     	; 0x264 <Keypad_getkey+0x1d0>
						else if (j == 1) return '6';
 23c:	86 e3       	ldi	r24, 0x36	; 54
 23e:	12 c0       	rjmp	.+36     	; 0x264 <Keypad_getkey+0x1d0>
						else if (j == 2) return '3';
 240:	83 e3       	ldi	r24, 0x33	; 51
 242:	10 c0       	rjmp	.+32     	; 0x264 <Keypad_getkey+0x1d0>
						else if (j == 3) return '=';
 244:	8d e3       	ldi	r24, 0x3D	; 61
 246:	0e c0       	rjmp	.+28     	; 0x264 <Keypad_getkey+0x1d0>
						break;
					case (3):
						if (j == 0) return '/';
 248:	8f e2       	ldi	r24, 0x2F	; 47
 24a:	0c c0       	rjmp	.+24     	; 0x264 <Keypad_getkey+0x1d0>
						else if (j == 1) return '*';
 24c:	8a e2       	ldi	r24, 0x2A	; 42
 24e:	0a c0       	rjmp	.+20     	; 0x264 <Keypad_getkey+0x1d0>
						else if (j == 2) return '-';
 250:	8d e2       	ldi	r24, 0x2D	; 45
 252:	08 c0       	rjmp	.+16     	; 0x264 <Keypad_getkey+0x1d0>
						else if (j == 3) return '+';
 254:	8b e2       	ldi	r24, 0x2B	; 43
 256:	06 c0       	rjmp	.+12     	; 0x264 <Keypad_getkey+0x1d0>
char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		for(j = 0; j < 4; j++){
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	e8 16       	cp	r14, r24
 25c:	f1 04       	cpc	r15, r1
 25e:	0c f4       	brge	.+2      	; 0x262 <Keypad_getkey+0x1ce>
 260:	6f cf       	rjmp	.-290    	; 0x140 <Keypad_getkey+0xac>
						break;
				}
			}
		}
	}
	return 'A';
 262:	81 e4       	ldi	r24, 0x41	; 65
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	ff 90       	pop	r15
 26e:	ef 90       	pop	r14
 270:	df 90       	pop	r13
 272:	cf 90       	pop	r12
 274:	bf 90       	pop	r11
 276:	af 90       	pop	r10
 278:	08 95       	ret

0000027a <LCD_lcd_kick>:
	}
	if (line == 2)
	{
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 27a:	c3 9a       	sbi	0x18, 3	; 24
 27c:	83 ed       	ldi	r24, 0xD3	; 211
 27e:	90 e3       	ldi	r25, 0x30	; 48
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_lcd_kick+0x6>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_lcd_kick+0xc>
 286:	00 00       	nop
 288:	c3 98       	cbi	0x18, 3	; 24
 28a:	08 95       	ret

0000028c <LCD_check_lcd_isbusy>:
 28c:	8a b3       	in	r24, 0x1a	; 26
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	8a bb       	out	0x1a, r24	; 26
 292:	c2 9a       	sbi	0x18, 2	; 24
 294:	c1 98       	cbi	0x18, 1	; 24
 296:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_lcd_kick>
 29a:	8a b3       	in	r24, 0x1a	; 26
 29c:	80 6f       	ori	r24, 0xF0	; 240
 29e:	8a bb       	out	0x1a, r24	; 26
 2a0:	c2 98       	cbi	0x18, 2	; 24
 2a2:	08 95       	ret

000002a4 <LCD_WRITE_COMMAND>:
 2a4:	cf 93       	push	r28
 2a6:	c8 2f       	mov	r28, r24
 2a8:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_check_lcd_isbusy>
 2ac:	8b b3       	in	r24, 0x1b	; 27
 2ae:	9c 2f       	mov	r25, r28
 2b0:	90 7f       	andi	r25, 0xF0	; 240
 2b2:	8f 70       	andi	r24, 0x0F	; 15
 2b4:	89 2b       	or	r24, r25
 2b6:	8b bb       	out	0x1b, r24	; 27
 2b8:	88 b3       	in	r24, 0x18	; 24
 2ba:	89 7f       	andi	r24, 0xF9	; 249
 2bc:	88 bb       	out	0x18, r24	; 24
 2be:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_lcd_kick>
 2c2:	2b b3       	in	r18, 0x1b	; 27
 2c4:	30 e1       	ldi	r19, 0x10	; 16
 2c6:	c3 9f       	mul	r28, r19
 2c8:	c0 01       	movw	r24, r0
 2ca:	11 24       	eor	r1, r1
 2cc:	92 2f       	mov	r25, r18
 2ce:	9f 70       	andi	r25, 0x0F	; 15
 2d0:	89 2b       	or	r24, r25
 2d2:	8b bb       	out	0x1b, r24	; 27
 2d4:	88 b3       	in	r24, 0x18	; 24
 2d6:	89 7f       	andi	r24, 0xF9	; 249
 2d8:	88 bb       	out	0x18, r24	; 24
 2da:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_lcd_kick>
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <LCD_clear_screen>:
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_WRITE_COMMAND>
 2e8:	08 95       	ret

000002ea <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	87 e8       	ldi	r24, 0x87	; 135
 2ec:	93 e1       	ldi	r25, 0x13	; 19
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_INIT+0x4>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_INIT+0xa>
 2f4:	00 00       	nop
	}
}

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2f6:	87 b3       	in	r24, 0x17	; 23
 2f8:	8e 60       	ori	r24, 0x0E	; 14
 2fa:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2fc:	88 b3       	in	r24, 0x18	; 24
 2fe:	81 7f       	andi	r24, 0xF1	; 241
 300:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	8a bb       	out	0x1a, r24	; 26
 306:	85 ea       	ldi	r24, 0xA5	; 165
 308:	9e e0       	ldi	r25, 0x0E	; 14
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_INIT+0x20>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_INIT+0x26>
 310:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 312:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_clear_screen>
		//LCD_WRITE_COMMAND(0x02);		/* send for 4 bit initialization of LCD  */
		//LCD_WRITE_COMMAND(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
		//LCD_WRITE_COMMAND(0x0c);              /* Display on cursor off*/
		//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
		//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 31c:	88 e2       	ldi	r24, 0x28	; 40
 31e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_WRITE_COMMAND>
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 32e:	8f e0       	ldi	r24, 0x0F	; 15
 330:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_WRITE_COMMAND>
 334:	08 95       	ret

00000336 <LCD_WRITE_CHAR>:
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 336:	cf 93       	push	r28
 338:	c8 2f       	mov	r28, r24
		_delay_ms(1);
		LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
		//LCD_check_lcd_isbusy();
		LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 33a:	8b b3       	in	r24, 0x1b	; 27
 33c:	9c 2f       	mov	r25, r28
 33e:	90 7f       	andi	r25, 0xF0	; 240
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	89 2b       	or	r24, r25
 344:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 346:	c1 9a       	sbi	0x18, 1	; 24
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 348:	c2 98       	cbi	0x18, 2	; 24
		LCD_lcd_kick();
 34a:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 34e:	2b b3       	in	r18, 0x1b	; 27
 350:	30 e1       	ldi	r19, 0x10	; 16
 352:	c3 9f       	mul	r28, r19
 354:	c0 01       	movw	r24, r0
 356:	11 24       	eor	r1, r1
 358:	92 2f       	mov	r25, r18
 35a:	9f 70       	andi	r25, 0x0F	; 15
 35c:	89 2b       	or	r24, r25
 35e:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 360:	c1 9a       	sbi	0x18, 1	; 24
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 362:	c2 98       	cbi	0x18, 2	; 24
		LCD_lcd_kick ();
 364:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_lcd_kick>
	#endif
}
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <main>:


int main()
{
	
	LCD_INIT();
 36c:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_INIT>
	Keypad_init();
 370:	0e 94 41 00 	call	0x82	; 0x82 <Keypad_init>
 374:	83 ed       	ldi	r24, 0xD3	; 211
 376:	90 e3       	ldi	r25, 0x30	; 48
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <main+0xc>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <main+0x12>
 37e:	00 00       	nop
	_delay_ms(50);
	unsigned char key_pressed;
	while(1){
		key_pressed = Keypad_getkey();
 380:	0e 94 4a 00 	call	0x94	; 0x94 <Keypad_getkey>
		switch(key_pressed){
 384:	8f 33       	cpi	r24, 0x3F	; 63
 386:	19 f0       	breq	.+6      	; 0x38e <main+0x22>
 388:	81 34       	cpi	r24, 0x41	; 65
 38a:	d1 f3       	breq	.-12     	; 0x380 <main+0x14>
 38c:	03 c0       	rjmp	.+6      	; 0x394 <main+0x28>
			case 'A':
				break;
			case '?':
				LCD_clear_screen();
 38e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_clear_screen>
				break;
 392:	f6 cf       	rjmp	.-20     	; 0x380 <main+0x14>
			default:
				LCD_WRITE_CHAR(key_pressed);
 394:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_WRITE_CHAR>
				break;
 398:	f3 cf       	rjmp	.-26     	; 0x380 <main+0x14>

0000039a <_exit>:
 39a:	f8 94       	cli

0000039c <__stop_program>:
 39c:	ff cf       	rjmp	.-2      	; 0x39c <__stop_program>
